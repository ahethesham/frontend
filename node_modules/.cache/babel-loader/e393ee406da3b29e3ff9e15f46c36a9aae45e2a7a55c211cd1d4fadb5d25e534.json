{"ast":null,"code":"var _jsxFileName = \"/Users/mohammedahethesham/Desktop/app/app/src/index.js\";\nimport createSudoku from './App.js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './snake.js';\nimport start from './snake.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet root = ReactDOM.createRoot(document.getElementById('root'));\n/*let ans=createSudoku()\nlet sudoku=JSON.parse(JSON.stringify(ans));\nlet i=0;\nwhile(i<30)\n  {\n    let row=Math.floor(Math.random()*9)\n    let col=Math.floor(Math.random()*9)\n    if(sudoku[row][col]!==-1)\n    {\n      i++;\n      sudoku[row][col]=-1;\n    }\n  }\nlet count=0;\nlet temp=JSON.parse(JSON.stringify(sudoku));\nconst root=ReactDOM.createRoot(document.getElementById('root'));\nclass Start extends React.Component{\n  func=()=>{\n    root.render(<Sudoku />)\n  }\n  render(){\n    return(\n      <button className='startButton' onClick={this.func}>\n        Click to Start\n      </button>\n    )\n  }\n}\nclass Sudoku extends React.Component{\n  ans=()=>{\n      count=0;\n      for(let i=0;i<sudoku.length;i++)\n      {\n        for(let j=0;j<sudoku[i].length;j++)\n        {\n          if(sudoku[i][j]==-1)\n          {\n            let t=document.getElementById(count);\n            t.value=ans[i][j]\n            count++;\n          }\n        }\n      }\n  }\n  verify=()=>{\n    count=0;\n    let flag=true;\n    for(let i=0;i<sudoku.length;i++)\n    {\n      for(let j=0;j<sudoku[i].length;j++)\n      {\n        if(sudoku[i][j]==-1)\n        {\n          let t=document.getElementById(count).value;\n          count++;\n          if(t!=ans[i][j])\n          {alert(\"try again!\"); flag=false\n          break;}\n        }\n      }\n      if(!flag)break;\n    }\n    if(flag)\n    alert(\"congragulations!\")\n  }\n  render(){\n    return (<>\n    <div className='Sudoku'>\n      {sudoku.map((arr,index)=><Row arr={arr} r={index}/>)}\n      </div>\n      <div >\n        <button className='ansButton' onClick={this.ans}>check answer</button>\n      </div>\n\n      <div >\n        <button className='verifyButton'onClick={this.verify}>submit</button>\n      </div>\n      </>\n    )\n  }\n}\nclass Row extends React.Component{\n  constructor(props)\n  {\n    super(props)\n  }\n  render()\n  {\n    return(\n      <div className='row'>{\n        this.props.arr.map((val,index)=>{\n        if(val==-1)\n        return <Input r={this.props.r} c={index} />\n        else\n        return <Element val={val}/>\n      })\n    }\n    </div>\n    )\n  }\n}\nclass Input extends React.Component{\n  constructor(props)\n  {\n    super(props)\n    \n  }\n  update=(e)=>{\n    let k=e.target.value;\n    if(k.length>1 || k.charCodeAt('0')-'0'.charCodeAt('0')>9)\n    {alert(\"invalid number enter between (0-9)\");\n    e.target.value=\"\"}\n    \n  }\n\n  render(){\n    return  <input id={count++}className=\"Element1\"type=\"text\" onKeyUp={this.update}/>\n  }\n}\nclass Element extends React.Component{\n  constructor(props)\n  {\n    super(props)\n  }\n  render(){\n   return( <div className='Element'>\n      {this.props.val}\n    </div>)\n  }\n}\n//root.render(<Start/>)\nlet data={\n  name:'alex',\n  id:1,\n  task:'for demo'\n}\nconst requestOptions = {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body:JSON.stringify(data)\n};\n//fetch('http://localhost:8000', requestOptions);\nlet d\nlet res=await fetch('http://localhost:8000/get')\n.then((res)=>d=res.json())\n.then((data)=>d=data)\nclass Todo extends React.Component{\n  render()\n  {\n    return (\n      <div className='Todo'>\n        <div style={{height:'80%'}}>\n        {d.map((data)=>\n        {return(<div style={{height:'20%'}}><Task id={data.id}task={data.task}done={data.done}/>\n        </div>)})}\n        </div>\n        <Input1/>\n      </div>\n    )\n  }\n}\nclass Input1 extends React.Component{\n  constructor(){\n    super()\n    this.state={\n      \"val\":\"add text\"\n    }\n    this.add=this.add.bind(this);\n    this.update=this.update.bind(this)\n  }\n  update(e){\n    let v=e.target.value;\n    this.setState({\"val\":v});\n  }\n  add(){\n    d.push({\n      \"id\":count++,\n      task:this.state.val,\n      done:false\n    })\n    fetch('http://localhost:8000/post',{\n      method:'POST',\n      headers:{ 'Content-Type': 'application/json' },\n      body:JSON.stringify(d)\n    })\n    root.render(<Todo/>)\n  }\n  render(){\n    return(\n      <div >\n        <input type='text' defaultValue={this.state.val} className='Input'onKeyUp={this.update}/>\n        <button className='add' onClick={this.add} >Add</button>\n      </div>\n    )\n  }\n}\nclass Task extends React.Component{\n  constructor(props)\n  {\n    super(props);\n    this.state={\n      id:props.id,\n      task:props.task,\n      done:props.done\n    }\n  }\n  render()\n  {\n    return (\n      <div className='Task'>\n        <input type='checkbox' id={this.state.id}/>\n        <label htmlFor={this.state.id}>{this.state.task}</label>\n      </div>\n    )\n  }\n}*/\nlet count = 100;\nroot.render( /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 225,\n  columnNumber: 13\n}, this));\n//start()\nfunction start1() {\n  let i = 0;\n  while (i < count) {\n    setTimeout(() => {\n      let t = document.getElementById(i++);\n      t.style.backgroundColor = 'black';\n    }, 500);\n  }\n}\nstart1();","map":{"version":3,"names":["createSudoku","React","ReactDOM","Board","start","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","count","render","fileName","_jsxFileName","lineNumber","columnNumber","start1","i","setTimeout","t","style","backgroundColor"],"sources":["/Users/mohammedahethesham/Desktop/app/app/src/index.js"],"sourcesContent":["import createSudoku  from './App.js'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Board from './snake.js'\nimport start from './snake.js'\nlet root=ReactDOM.createRoot(document.getElementById('root'));\n/*let ans=createSudoku()\nlet sudoku=JSON.parse(JSON.stringify(ans));\nlet i=0;\nwhile(i<30)\n  {\n    let row=Math.floor(Math.random()*9)\n    let col=Math.floor(Math.random()*9)\n    if(sudoku[row][col]!==-1)\n    {\n      i++;\n      sudoku[row][col]=-1;\n    }\n  }\nlet count=0;\nlet temp=JSON.parse(JSON.stringify(sudoku));\nconst root=ReactDOM.createRoot(document.getElementById('root'));\nclass Start extends React.Component{\n  func=()=>{\n    root.render(<Sudoku />)\n  }\n  render(){\n    return(\n      <button className='startButton' onClick={this.func}>\n        Click to Start\n      </button>\n    )\n  }\n}\nclass Sudoku extends React.Component{\n  ans=()=>{\n      count=0;\n      for(let i=0;i<sudoku.length;i++)\n      {\n        for(let j=0;j<sudoku[i].length;j++)\n        {\n          if(sudoku[i][j]==-1)\n          {\n            let t=document.getElementById(count);\n            t.value=ans[i][j]\n            count++;\n          }\n        }\n      }\n  }\n  verify=()=>{\n    count=0;\n    let flag=true;\n    for(let i=0;i<sudoku.length;i++)\n    {\n      for(let j=0;j<sudoku[i].length;j++)\n      {\n        if(sudoku[i][j]==-1)\n        {\n          let t=document.getElementById(count).value;\n          count++;\n          if(t!=ans[i][j])\n          {alert(\"try again!\"); flag=false\n          break;}\n        }\n      }\n      if(!flag)break;\n    }\n    if(flag)\n    alert(\"congragulations!\")\n  }\n  render(){\n    return (<>\n    <div className='Sudoku'>\n      {sudoku.map((arr,index)=><Row arr={arr} r={index}/>)}\n      </div>\n      <div >\n        <button className='ansButton' onClick={this.ans}>check answer</button>\n      </div>\n\n      <div >\n        <button className='verifyButton'onClick={this.verify}>submit</button>\n      </div>\n      </>\n    )\n  }\n}\nclass Row extends React.Component{\n  constructor(props)\n  {\n    super(props)\n  }\n  render()\n  {\n    return(\n      <div className='row'>{\n        this.props.arr.map((val,index)=>{\n        if(val==-1)\n        return <Input r={this.props.r} c={index} />\n        else\n        return <Element val={val}/>\n      })\n    }\n    </div>\n    )\n  }\n}\nclass Input extends React.Component{\n  constructor(props)\n  {\n    super(props)\n    \n  }\n  update=(e)=>{\n    let k=e.target.value;\n    if(k.length>1 || k.charCodeAt('0')-'0'.charCodeAt('0')>9)\n    {alert(\"invalid number enter between (0-9)\");\n    e.target.value=\"\"}\n    \n  }\n\n  render(){\n    return  <input id={count++}className=\"Element1\"type=\"text\" onKeyUp={this.update}/>\n  }\n}\nclass Element extends React.Component{\n  constructor(props)\n  {\n    super(props)\n  }\n  render(){\n   return( <div className='Element'>\n      {this.props.val}\n    </div>)\n  }\n}\n//root.render(<Start/>)\nlet data={\n  name:'alex',\n  id:1,\n  task:'for demo'\n}\nconst requestOptions = {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body:JSON.stringify(data)\n};\n//fetch('http://localhost:8000', requestOptions);\nlet d\nlet res=await fetch('http://localhost:8000/get')\n.then((res)=>d=res.json())\n.then((data)=>d=data)\nclass Todo extends React.Component{\n  render()\n  {\n    return (\n      <div className='Todo'>\n        <div style={{height:'80%'}}>\n        {d.map((data)=>\n        {return(<div style={{height:'20%'}}><Task id={data.id}task={data.task}done={data.done}/>\n        </div>)})}\n        </div>\n        <Input1/>\n      </div>\n    )\n  }\n}\nclass Input1 extends React.Component{\n  constructor(){\n    super()\n    this.state={\n      \"val\":\"add text\"\n    }\n    this.add=this.add.bind(this);\n    this.update=this.update.bind(this)\n  }\n  update(e){\n    let v=e.target.value;\n    this.setState({\"val\":v});\n  }\n  add(){\n    d.push({\n      \"id\":count++,\n      task:this.state.val,\n      done:false\n    })\n    fetch('http://localhost:8000/post',{\n      method:'POST',\n      headers:{ 'Content-Type': 'application/json' },\n      body:JSON.stringify(d)\n    })\n    root.render(<Todo/>)\n  }\n  render(){\n    return(\n      <div >\n        <input type='text' defaultValue={this.state.val} className='Input'onKeyUp={this.update}/>\n        <button className='add' onClick={this.add} >Add</button>\n      </div>\n    )\n  }\n}\nclass Task extends React.Component{\n  constructor(props)\n  {\n    super(props);\n    this.state={\n      id:props.id,\n      task:props.task,\n      done:props.done\n    }\n  }\n  render()\n  {\n    return (\n      <div className='Task'>\n        <input type='checkbox' id={this.state.id}/>\n        <label htmlFor={this.state.id}>{this.state.task}</label>\n      </div>\n    )\n  }\n}*/\nlet count=100;\nroot.render(<Board/>);\n//start()\nfunction start1(){\n  let i=0;\n  while(i<count)\n  {\n  setTimeout(()=>{\n      let t=document.getElementById(i++)\n      t.style.backgroundColor='black'\n  },500)\n   }\n}\nstart1()"],"mappings":";AAAA,OAAOA,YAAY,MAAO,UAAU;AACpC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAO,aAAa;AACpB,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,KAAK,MAAM,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAC9B,IAAIC,IAAI,GAACL,QAAQ,CAACM,UAAU,CAACC,QAAQ,CAACC,cAAcbJ,IAAI,CAACK,MAAM,eAACN,OAAA,CAACH,KAAK;EAAAU,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAC,CAAC,CAAC;AACrB;AACA,SAASC,MAAMA,CAAA,EAAE;EACf,IAAIC,CAAC,GAAC,CAAC;EACP,OAAMA,CAAC,GAACP,KAAK,EACb;IACAQ,UAAU,CAAC,MAAI;MACX,IAAIC,CAAC,GAACX,QAAQ,CAACC,cAAc,CAACQ,CAAC,EAAE,CAAC;MAClCE,CAAC,CAACC,KAAK,CAACC,eAAe,GAAC,OAAO;IACnC,CAAC,EAAC,GAAG,CAAC;EACL;AACH;AACAL,MAAM,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}